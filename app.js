// Generated by CoffeeScript 1.7.1
(function() {
  var Memcached, app, crypto, express, http, memcached, request, _;

  express = require('express');

  http = require('http');

  Memcached = require('memcached');

  crypto = require('crypto');

  request = require('request');

  _ = require('underscore');

  app = express();

  memcached = new Memcached(process.env.CACHE_SERVER || '127.0.0.1:11211', {
    namespace: 'dstld:proxy',
    compressionThreshold: 10
  });

  app.set('port', process.env.PORT || 5555);

  app.use(express.logger('dev'));

  app.use(express.json());

  app.use(express.urlencoded());

  app.use(express.methodOverride());

  app.use(app.router);

  if ('development' === app.get('env')) {
    app.use(express.errorHandler());
  }

  app.get('/', function(req, res) {
    var done, map, urls;
    urls = req.query.urls;
    map = {};
    urls.forEach(function(url) {
      var shasum;
      shasum = crypto.createHash('sha1');
      shasum.update(url);
      return map[shasum.digest('hex')] = url;
    });
    done = function(data) {
      if (_.isEqual(_.keys(data), _.keys(map))) {
        return res.json(data);
      }
    };
    return memcached.getMulti(_.keys(map), function(err, data) {
      return _.each(map, function(url, digest) {
        if (!data[digest]) {
          return request({
            uri: url,
            encoding: null
          }, function(err, resp, body) {
            var dataUri;
            dataUri = body.toString('base64');
            memcached.set(digest, dataUri, 10000, function(err, result) {
              if (err) {
                return console.error(err);
              }
            });
            data[digest] = dataUri;
            return done(data);
          });
        } else {
          return done(data);
        }
      });
    });
  });

  http.createServer(app).listen(app.get('port'), function() {
    return console.log("Express server listening on port " + (app.get('port')));
  });

}).call(this);
